<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rich Code]]></title>
  <link href="http://rjmccluskey.github.io/atom.xml" rel="self"/>
  <link href="http://rjmccluskey.github.io/"/>
  <updated>2015-02-12T11:02:58-08:00</updated>
  <id>http://rjmccluskey.github.io/</id>
  <author>
    <name><![CDATA[Rich McCluskey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Arrays and Hashes in Ruby]]></title>
    <link href="http://rjmccluskey.github.io/blog/2014/10/05/using-arrays-and-hashes-in-ruby/"/>
    <updated>2014-10-05T14:06:11-07:00</updated>
    <id>http://rjmccluskey.github.io/blog/2014/10/05/using-arrays-and-hashes-in-ruby</id>
    <content type="html"><![CDATA[<p>Time for another coding lesson. So what&#8217;s on the table for this week? Why, it&#8217;s our good fiends <span class="italic">arrays</span> and <span class="italic">hashes</span>.</p>


<!-- more -->


<p>So what are they? Well, to put it simply, they are fancy variables that we can use to store lists of data. A normal, boring variable stores just one value. But with arrays and hashes we can store an endless amount! We can even use them to store other arrays and hashes! So why do we have two types and what are the differences between the two?</p>




<p>To give you an answer to that last question, let me first explain what arrays are. As you already know an array is a list of data. In ruby, you create an array with square brackets `[&#8230;]` and separate the values with commas. So for example if you wanted an array named <span class="italic">array</span> (I know, very creative right?!) containing three strings, &#8220;one&#8221; &#8220;two&#8221; and &#8220;three&#8221; you&#8217;d do so like this:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;one&quot;</span><span class="p">,</span><span class="s2">&quot;two&quot;</span><span class="p">,</span><span class="s2">&quot;three&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<p>But there&#8217;s something important to know about arrays. Each value in an array is assigned a number. This is important for when you want to call one of those values. But instead of starting with the number 1, the first value inside an array is assigned the number 0. So remember that super sweet array we just created? Well, the first value, &#8220;one&#8221;, is assigned as 0, &#8220;two&#8221; is assigned as 1, and &#8220;three&#8221; is assigned as 2. So if you wanted to print the &#8220;first&#8221; value from your array to the screen, you&#8217;d do so like this:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="nb">puts</span> <span class="n">array</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<p>Arrays are great when you want order to your list. The order can be manipulated in all sorts of ways! A simple example would be a list of names that you want to then alphabetize. But what if you don&#8217;t care so much about the order and you want to describe the values with something different than numbers? This is exactly where hashes come into play! With hashes, you can assign values with whatever you want. Hashes are lists of &#8220;key:value pairs&#8221;. Keys must be unique but values can be repeated. So let&#8217;s say you wanted to create a hash of people&#8217;s names and their eye color. You could do it like this:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="n">eye_color</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">Richard</span><span class="p">:</span> <span class="s2">&quot;blue&quot;</span><span class="p">,</span> <span class="ss">Natalie</span><span class="p">:</span> <span class="s2">&quot;green&quot;</span><span class="p">,</span> <span class="ss">Bob</span><span class="p">:</span> <span class="s2">&quot;green&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>As you can see, instead of the square brackets hashes use curly braces `{&#8230;}`. If you want to print Bob&#8217;s eye color, you could do so like this: </p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="nb">puts</span> <span class="n">eye_color</span><span class="o">[</span><span class="ss">:Bob</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<p>Calling a value from a hash uses square brackets just like an array, and make sure to put the colon ( : ) in front of the key. The order of hashes are a bit more arbitrary, but they are better than arrays to use in certain situations.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Are You Thinking?]]></title>
    <link href="http://rjmccluskey.github.io/blog/2014/10/05/what-are-you-thinking/"/>
    <updated>2014-10-05T13:50:29-07:00</updated>
    <id>http://rjmccluskey.github.io/blog/2014/10/05/what-are-you-thinking</id>
    <content type="html"><![CDATA[<p>At Dev Bootcamp we are learning a ton of stuff. That&#8217;s obvious. But, as a DBC student, it makes me wonder how I will retain as much information as possible. The reality is we all have different thinking styles and we all learn in different ways so how can I make sure I am learning in the best environment? Well, a good place to start is to actually narrow down my thinking style. Luckily, DBC had us do this before we even started Phase 0!</p>


<!-- more -->


<p>According to Anthony Gregorc, there are <a href="http://web.cortland.edu/andersmd/learning/gregorc.htm">four main thinking styles</a>. These are concrete sequential, concrete random, abstract sequential, and abstract random. I don&#8217;t want to bore you with the details, but let&#8217;s quickly go over what each of those means. This <a href="http://www.thelearningweb.net/personalthink.html">thinking style test</a> sums it up best: <blockquote><span class="italic">&#8220;Concrete Sequential Thinkers tend to be based in reality. They process information in an ordered, sequential, linear way. Concrete Random Thinkers are experimenters. Abstract Random Thinkers organize information through reflection, and thrive in unstructured, people-oriented environments. Abstract Sequential Thinkers love the world of theory and abstract thought.&#8221;</span></blockquote></p>




<p>So I know you&#8217;re dying to know my thinking style, right?! Well after I took that test, it turns out that I am a tie between concrete random and abstract random. At first I thought this was a little weird and wondered if I had messed up the test somehow. But the more I thought about it, the more it made complete sense. I love to experiment and get my hands dirty. If I&#8217;m not actually typing in code and testing it, I will not learn. And that goes for using code incorrectly. I like to make errors because it teaches me more about how my computer actually interprets the code that I am giving it. But I also learn a lot from others and, even if sometimes I&#8217;d rather work alone, being in a team helps to motivate me.</p>




<p>Now that I understand my style, I can be strategic and use it to my advantage. Making sure to do plenty of practice problems and seeking out others to pair with will probably be the best thing for me. Looking back on my experience with Phase 0 so far, I can see how I&#8217;ve already done this and how I&#8217;ve strayed away to my disadvantage. At first, I wasn&#8217;t so eager to pair program because I wanted to go through everything by myself first. This might have been due to my concrete random qualities. But I think I ended up spending a lot more time on topics that I could have understood quicker had I been pairing. These same concrete random qualities were making me chase down rabbit holes and without someone else there to pull me back, I went pretty dang far down some of these holes! However, this last week I have been pairing a lot more and I am really starting to see why DBC is all about it. Sometimes it&#8217;s a bit of a struggle for me to navigate because I want my hands on the keyboard, but explaining to another person my ideas without just spilling them into my computer has helped me to be more careful with my organization.</p>




<p>While it&#8217;s obvious that we all have different natural thinking styles, I still think it is important to challenge yourself outside of this definition. For example, concrete sequential thinkers might say that they can&#8217;t work in groups because it&#8217;s just the way they think. But because we live with other people, having this mindset could be a detriment. DBC tells its students to explore the differences between <a href="http://www.brainpickings.org/index.php/2014/01/29/carol-dweck-mindset/">growth and fixed mindsets</a>. I personally agree that we can all have a &#8220;growth mindset&#8221; and, for the most part, we are not limited to natural abilities or intelligence. It&#8217;s good to know your thinking style to create a good learning environment, but it doesn&#8217;t have to define everything you do.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Quick Explaination of Relative, Absolute, and Fixed Positions]]></title>
    <link href="http://rjmccluskey.github.io/blog/2014/09/28/a-quick-explaination-of-relative-absolute-and-fixed-positions/"/>
    <updated>2014-09-28T13:55:47-07:00</updated>
    <id>http://rjmccluskey.github.io/blog/2014/09/28/a-quick-explaination-of-relative-absolute-and-fixed-positions</id>
    <content type="html"><![CDATA[<p>This last week has been intense! I’ve basically gone from zero knowledge of HTML and CSS to creating this very website you are reading this on. But don’t be fooled! I put in a ton of work and had to battle though some major frustration to get here. So what was the hardest part for me to learn? By far it was understanding CSS positioning.</p>


<!-- more -->


<p>I still have a long ways to go before I’m an expert with positioning, but I’ve learned some important basics that I’m gonna share with you right now! So to get you started, let’s discuss the conceptual differences between relative, absolute, and fixed positions.</p>


<p class="bold">Relative Position</p>


<p>When an element&#8217;s position is set to &#8220;relative&#8221; you can move it around <span class="italic">relative</span> to where it would normally be displayed. Let&#8217;s say you have an image inside of your footer with a relative position. By default, this image should just show up inside your footer on the left side. Setting &#8220;right: 10px;&#8221; will place the image 10 pixels from the right side of your footer. So in other words, this image has moved <span class="italic">relative</span> to the footer. Pretty simple right?! Give it some practice and try for yourself!</p>


<p class="bold">Absolute Position</p>


<p>Think of an element with an &#8220;absolute&#8221; position as suck on the page like a sticker. It ignores any other elements and is placed on the page exactly where you tell to to be! If you place it 300px from the top and 40px from the left, it will always be 300px from the top and 40px from the left. The only thing it is positoned relative to is the entire web page itself.</p>


<p class="bold">Fixed Position</p>


<p>An element with a &#8220;fixed&#8221; position doesn&#8217;t move for anyone! Other elements can&#8217;t push it around and even scrolling will not move it. Fixed positioning is great for when you want a menu bar that always shows up no matter where you are on the page.</p>


<p>So there you have it! It&#8217;s important to solidify these concepts before you start messing with positioning stuff on your website. Sorry it&#8217;s so brief but it&#8217;s late and I need some sleep! ;)</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is Dev Bootcamp a Restaurant or a Kitchen?]]></title>
    <link href="http://rjmccluskey.github.io/blog/2014/09/20/is-dev-bootcamp-a-restaurant-or-a-kitchen/"/>
    <updated>2014-09-20T17:44:40-07:00</updated>
    <id>http://rjmccluskey.github.io/blog/2014/09/20/is-dev-bootcamp-a-restaurant-or-a-kitchen</id>
    <content type="html"><![CDATA[<p>I just watched a very interesting Fireside chat with the founder of Dev Bootcamp, Shereef Bishay. In the video he explains how DBC was created and the attitude the students and instructors should have for the best possible experience. In Shereef&#8217;s opinion, DBC is more of a kitchen than a restaurant. <!-- more --> In a restaurant, you look at a menu and decide what you like and if you are willing to pay for it. After deciding, you expect to sit back while the waiters and the chefs get you exactly what you ordered. Most traditional education systems work this way, but not DBC! Shereef goes on to explain that at DBC you are part of the kitchen. Your education is really up to how hungry you are to learn. Of course there is a curriculum and teachers but its up to you to seek out help and help others. In the kitchen, everyone gets their hands dirty and everyone contributes to what is happening. DBC isn&#8217;t just mindless lectures followed by tests. It has structure but there&#8217;s also room for creativity. Because of this, it seems that DBC is constantly evolving into a stronger and stronger monster that feeds on knowledge and curiosity!</p>




<p>So what&#8217;s my impression on DBC so far? Freakin&#8217; awesome! I can&#8217;t imagine a better learning experience. Don&#8217;t get me wrong, I am pretty nervous about all the work. But I&#8217;m excited by the challenge. I definitely fell into the restaurant mindset in the past but I am going to make a conscious effort to &#8220;stay in the kitchen&#8221; while at DBC. I think it might be a bit hard at first, because I am a little introverted, but I know that many other boots will be in the same position as me and that is encouraging.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What the Heck Are Git and GitHub?]]></title>
    <link href="http://rjmccluskey.github.io/blog/2014/09/20/what-the-heck-are-git-and-github/"/>
    <updated>2014-09-20T17:39:27-07:00</updated>
    <id>http://rjmccluskey.github.io/blog/2014/09/20/what-the-heck-are-git-and-github</id>
    <content type="html"><![CDATA[<p>I&#8217;m just finishing my very first week of Phase 0 at Dev Bootcamp and it has far exceeded my expectations! I am amazed at how much I have already learned in less than one week and I am stoked to see what&#8217;s next! The vibe here is nothing but motivational and supportive, which is pretty astonishing considering no one has even met in person yet. And as part of the educational experience I am going to share some stuff I&#8217;ve been learning!</p>


<!-- more -->


<p>I want to talk to you about Git and GitHub. Most of this first week&#8217;s material has been on that subject and for good reason. So what is Git? What is GitHub? Well, to really answer those questions I need to tell you about my little friend version control. Version control remembers all the changes you&#8217;ve made to certain files on your computer and when you&#8217;ve made them. And it even lets you collaborate with others on those same files because it has the ability to merge them together! Imagine the following scenario. You are a scientist researching the effectiveness of different coffees from all over the world (ahh, science!). But you don&#8217;t have the time or the funds to do all the research yourself, so you recruit a team of scientists from different countries to help you with your work. One way to do this would be to have everyone send you their findings separately, and then figure out how to put it all together into a research paper yourself. Or, we can use our buddy version control and have everyone work on the same research paper at the same time! Whenever anyone adds some new data or a new finding, this would be logged and then you can pick and choose what to merge into your master file! And if you change something and decide an earlier version of your paper was better you can easily revert back. Isn&#8217;t that great?!</p>




<p>So how do we actually use version control? Well, that&#8217;s exactly what Git is for! Git is a version control program that runs locally on your computer. Unlike most software, it doesn&#8217;t have a graphical user interface (GUI) and you use your command line to control it. If you are unfamiliar with your command line and how to use it, check out these resources: <a href="http://lifehacker.com/5633909/">A Command Line Primer for Beginners</a>, <a href="http://cli.learncodethehardway.org/book/">The Command Line Crash Course</a>. You assign projects into repositories (repos). A repo is simply a file structure that Git knows to keep track of. Whenever you make a significant change to your repo, you save this change by making a &#8220;commit.&#8221; All your commits are logged for the entirety of the project and you can revert your repo back to any of them at any time! You can even make different versions of your repo with &#8220;branches.&#8221; By default, your repo starts out with the &#8220;master branch&#8221; and other branches can be &#8220;merged&#8221; into your master. This is all great when you are working by yourself, but wouldn&#8217;t it be even more awesome if there was a copy of your repo that lived on the Internet for you and other people to collaborate on?!</p>




<p>You&#8217;re in luck! <a href="http://www.github.com">GitHub</a> is like Facebook for Git users. It is literally an online &#8220;hub&#8221; for you to store your repos and see other people&#8217;s projects as well. And Git syncs with it! You can &#8220;push&#8221; your commits to GitHub, and &#8220;pull&#8221; any commits from GitHub that aren&#8217;t on your computer yet. If you like someone&#8217;s public project and want to create your own from theirs, you can &#8220;fork&#8221; it into your own separate repo and then &#8220;clone&#8221; that repo to your computer. If they update their repo and you want to get their changes, you do this by &#8220;fetching.&#8221; Now for the really cool part. You can even try to convince others to use your changes from your forked repo by sending them a &#8220;pull request.&#8221; That&#8217;s the real beauty of open source software!</p>




<p>So hopefully you now have a better idea what Git and GitHub are and the differences between them. There&#8217;s still a ton more to learn before you can use them but understanding their concepts is an important start. Thanks for reading! :)</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dev Bootcamp Is More Than Just Learning to Code]]></title>
    <link href="http://rjmccluskey.github.io/blog/2014/09/16/dev-bootcamp-is-more-than-just-learning-to-code/"/>
    <updated>2014-09-16T22:46:38-07:00</updated>
    <id>http://rjmccluskey.github.io/blog/2014/09/16/dev-bootcamp-is-more-than-just-learning-to-code</id>
    <content type="html"><![CDATA[<p>I have officially started Phase 0 of <a href="http://devbootcamp.com">devbootcamp</a> and right away we are being challenged to research mindfulness, productivity, and time management. At first I was a little apprehensive to do this because I was really itching to get straight to writing code, but I continued on and actually discovered some really awesome stuff!</p>

<!-- more -->


<p>The next ~18 weeks are gonna be really intense. I knew they would be before I even applied to DBC, but now that I have started the curriculum I am beginning to truly understand what that means. I’m not gonna lie. It’s scary. But I’m so pumped at the same time! And I realize that we are spending time to learn things like mindfulness so that we not only keep our sanity, but also to develop ourselves as human beings. You might even say that DBC isn’t only about web development, but self development too.</p>

<p>So what am I gonna do during Phase 0 to keep myself on tract and reduce stress? First, I want to dabble with meditation and what better way to learn to meditate than to use a web app! <a href="https://www.headspace.com/">Headspace</a> is like a “gym membership for the mind” and offers quick exercises to get you meditating. Second, I’m gonna try to implement the <a href="http://pomodorotechnique.com/">Pomodoro Technique</a> into my studies. If you’ve never heard of this before, it basically involves working in 25 minute increments with time to reflect on your work. And thirdly, I want to give myself a little slack. This <a href="http://paidtoexist.com/counterintuitive-productivity/">article</a> on productivity says it best: “Relax your expectations of constant, never-ceasing production. Instead, focus your energies on how you want to feel and what you need to operate with greatness… The key is in learning to identify and honor your natural rhythms. Listen and lean into whatever you’re being pulled to.”</p>

<p>Alright, I’m off to bed! Hopefully my next entry will have some actual code in it! ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Taking a Leap]]></title>
    <link href="http://rjmccluskey.github.io/blog/2014/09/09/taking-a-leap/"/>
    <updated>2014-09-09T21:00:00-07:00</updated>
    <id>http://rjmccluskey.github.io/blog/2014/09/09/taking-a-leap</id>
    <content type="html"><![CDATA[<p>Three years ago I graduated from Cal Poly with a degree in Civil Engineering. In case you didn’t already do the math, three years ago was 2011 and the economy was horrible. I didn’t know <em>anyone</em> in my major that had a job lined up. On top of all that, I wasn’t even sure if civil engineering was really what I wanted to do. Go figure, an 18 year old entering college straight from high school had trouble choosing a major…</p>

<!-- more -->


<p>But I didn’t want to admit “defeat” and I pretended that I was destined to be a civil engineer. I pushed past my gut feelings, got certified as an Engineer in Training (EIT) and eventually found a job. And for some time things were pretty good!</p>

<p>After a while, however, I started feeling an itch. And it didn’t go away. I wanted something different; something more creative but still technical. I wanted to feel passionate about my work and I wanted to have fun. I am sure there are civil engineers out there that feel this way about their work, but that simply was not me. I finally admitted to myself that it was ok to change my mind.</p>

<p>So, I began searching. I began noticing what made me feel excited. I purposely resisted falling into mediocracy. I started to learn some basic programming, and I really liked it! Pretty quickly I realized that writing code could be exactly what I was looking for in a career!  Learning on my own was going great but I knew that if I really wanted to take this leap and switch careers I would personally need more structure and mentorship. I had heard of “bootcamp” courses that taught programming languages in an incredibly short amount of time and as I researched this possibility I eventually found <a href="http://devbootcamp.com/">Dev Bootcamp</a>. I applied, and I got in!</p>

<p>In less than a week I embark on “Phase 0” of this program and I couldn’t be more excited. As part of my journey I thought it would be useful to blog about my experience so that I have a reference to look back on. I’ve never done anything like this before, but I want this to be public so that hopefully I inspire someone else to find more passion in their career.</p>

<p>So here it goes!</p>
]]></content>
  </entry>
  
</feed>
