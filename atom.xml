<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rich Code]]></title>
  <link href="http://rjmccluskey.github.io/atom.xml" rel="self"/>
  <link href="http://rjmccluskey.github.io/"/>
  <updated>2015-02-12T19:21:37-08:00</updated>
  <id>http://rjmccluskey.github.io/</id>
  <author>
    <name><![CDATA[Rich McCluskey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[I'm a Programmer]]></title>
    <link href="http://rjmccluskey.github.io/blog/2015/02/12/im-a-programmer/"/>
    <updated>2015-02-12T18:58:39-08:00</updated>
    <id>http://rjmccluskey.github.io/blog/2015/02/12/im-a-programmer</id>
    <content type="html"><![CDATA[<p>You&rsquo;ll notice a pretty big gap in time between this post and the last post. Well, that&rsquo;s because I was working my ass off at Dev Bootcamp! OK, I probably could&rsquo;ve still blogged but the reality is that it&rsquo;s hard for me to consistently write. But now that I&rsquo;ve graduated from DBC and I&rsquo;m looking for jobs I thought, what better time to start again?! There&rsquo;s so much I could talk about but I want to begin with this: <em>I am a programmer!</em></p>

<p>Am I programmer because I graduated from a coding school and magically became one that very day? &hellip; No. That&rsquo;s not what I am trying to say and I probably could&rsquo;ve called myself one much before that. But I&rsquo;m writing this now because being away from DBC and on my own has given me time to reflect. It has also given me time to continue to code and continue to learn. Being surrounded by tons of like minded people with the same general goal at DBC makes it pretty easy to stay motivated. But what happens when we leave? Any accountability has to come from myself, and to be honest I think that I&rsquo;ve done pretty well. I still want to code, I still want to improve, and I sure as hell still want to do this professionally. I began to apply to jobs, I reinvented my website, and I am jumping on an open source project (more to come on this!). Being away from DBC while still finding the same motivation to code is why I&rsquo;m a programmer.</p>

<p>So I guess this is me grabbing my identity and shouting it out to the world! I&rsquo;m so excited for the future and what it holds.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Do You Have a Question?]]></title>
    <link href="http://rjmccluskey.github.io/blog/2014/11/16/do-you-have-a-question/"/>
    <updated>2014-11-16T12:17:30-08:00</updated>
    <id>http://rjmccluskey.github.io/blog/2014/11/16/do-you-have-a-question</id>
    <content type="html"><![CDATA[<p>Tomorrow is the big day. I start Phase 1 of <a href="http://devbootcamp.com">DBC</a> which means that the learning switches from remote to in-person and the real work begins. I&#8217;m so excited, a little nervous, really happy, but also kinda sad that I&#8217;ll be away from some of the people I love for a little while. Anyways, DBC is awesome because our education here is by no means traditional. In fact, a lot of it is up to us students asking for the right things. If we need help on something we need to ask for it because we&#8217;re gonna be moving fast! It&#8217;s really important that to get good answers, you need to ask good questions. So let&#8217;s talk about how to ask good technical questions.</p>


<!-- more -->


<p>So what makes a good question? Wait&#8230; was that good question? Just messing ;) I think the very first thing you need in order to ask a good question is to do as much research on your own within a reasonable time frame. If you&#8217;re chasing down random links on Google and not finding anything helpful then you&#8217;re pretty safe to start asking questions. This first step is important because it helps you to fully understand exactly what it is that you&#8217;re having trouble with.</p>




<p>Now that you know exactly what the problem is, you need to present it in a short and specific way. When posting a question online, this would involve the title of your post. Obviously since it is a title, it will be short but that doesn&#8217;t mean you should be too general. Imagine that you are trying to ask your question to your really busy boss. Be short and straight to the point with the title. If you&#8217;re asking a question in person, you don&#8217;t exactly have a title (unless you write it on a sticky note and put it on your head). So you can skip this part.</p>




<p>Next, you&#8217;ll want to explain the background of your problem. Introduce your problem by explaining how you got to it. What were you trying to do what what tools where you using? Explain the scope of the problem so that whoever is helping you knows exactly what was going on. After that you&#8217;ll want to post some actual lines of code so that the person helping you can recreate the problem is need be. Remember that any error messages may also be helpful.</p>




<p>Sometimes when we are asking programming questions we want to jump straight to the error because that&#8217;s what we are focused on. But it is important to present the full scope of the problem because the person we are asking the question to, or any readers online, doesn&#8217;t know exactly what you were doing before you got there.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Do You Take the Punches?]]></title>
    <link href="http://rjmccluskey.github.io/blog/2014/11/07/how-to-do-you-take-the-punches/"/>
    <updated>2014-11-07T12:08:36-08:00</updated>
    <id>http://rjmccluskey.github.io/blog/2014/11/07/how-to-do-you-take-the-punches</id>
    <content type="html"><![CDATA[<p>According to Dr. L. Nathanson, if people do not process shame in a healthy way, they will generally respond to it in one of four defensive directions which he has organized in the <a href="http://southdown.on.ca/publications/articles/Compass-of-Shame.pdf">&#8220;Compass of Shame&#8221;</a>. As shown in the picture below, these four directions are <span class="italic">withdrawal</span>, <span class="italic">attack self</span>, <span class="italic">avoidance</span>, and <span class="italic">attack other</span>. This week, <a href="http://devbootcamp.com">DBC</a> has asked us to examine our lives and ask ourselves how we respond to conflict and shame.</p>


<!-- more -->


<p><img src="http://3.bp.blogspot.com/-2ylImw4G2g4/Tfs_FpPbAxI/AAAAAAAAAQI/K1vDnBYkShw/s1600/shameu.jpg" class="img-body"></p>

<p>I think that most people have used all four of these defense mechanisms at some point but generally we go to one more often. In the past, I&#8217;ve definitely reacted to shame in the direction of attacking myself. There&#8217;s lots of examples I could give, but to be honest, it&#8217;s a little too personal for me to just spill out for anyone on the Internet to see. Today, I can say that I&#8217;ve gotten a lot better at not doing this and instead learning from any emotional conflict I encounter, but this skill was something that I had to work at. And in a weird way, I think my tenancy to &#8220;attack myself&#8221; actually helped me to improve my ability to process shame. Why do I think this? Well, the way I would attack myself was by blaming myself for the conflict and putting myself down. This is definitely not healthy but it led to a lot of self examination. Of course, examining yourself with the wrong attitude can be very damaging, but luckily I managed to eventually turn it positive.</p>




<p>I used to wonder all the time, what could I have done differently that would have prevented the conflict. Sometimes this would make me blame myself wrongfully, which led to putting myself down. I&#8217;d hold onto the shame, and that sucked. But looking inside myself sparked other discoveries that I think helped me to let go of the shame and look at the experience as a chance to learn and improve myself. Instead of putting myself down, I began to grow stronger.</p>




<p>I&#8217;m not perfect, but I think I&#8217;ve become pretty good at spotting when my mind wants to go down it&#8217;s old path of attacking myself. Being aware of my emotional reactions gives me the ability to see it with a clearer mind and process my emotions more healthily.</p>




<p>So what does this have to do with learning to code? In any field you are going to be working with other people. And when people get together, there tends to be conflict at some point. So I think DBC is trying to help us improve ourselves more than just technically so that we are just better human beings. And as better human beings, we can be better developers!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[So What About Rails?]]></title>
    <link href="http://rjmccluskey.github.io/blog/2014/11/05/so-what-about-rails/"/>
    <updated>2014-11-05T12:10:35-08:00</updated>
    <id>http://rjmccluskey.github.io/blog/2014/11/05/so-what-about-rails</id>
    <content type="html"><![CDATA[<p>So up to this point of Phase 0 at <a href="http://devbootcamp.com">DBC</a> I&#8217;ve learned a ton of stuff. I&#8217;m now familiar with git and GitHub, HTML, CSS, Ruby, JavaScript, and even a little bit of SQL. Before I started DBC, I had heard of all these languages except that I never heard or read about Ruby by itself. It was always mentioned as &#8220;Ruby on Rails&#8221;. We won&#8217;t be getting into Rails until the immersive phases but I still want to know more about it since it seems to be so closely tied with Ruby. So let&#8217;s learn about Rails!</p>


<!-- more -->


<p>Stated simply, Ruby on Rails, or just Rails, is an open source web framework written in Ruby. Lots of different companies use RoR including Twitter and Github. Sounds good, except what exactly is a framework? To conceptually understand a framework let&#8217;s look at the frame of a building.</p>


<p><img class="img-body" src="http://www.vermontframes.com/images/page-design-process.jpg"></p>

<p>The framework of this house is not visually appealing and wouldn&#8217;t provide very good shelter by itself, but it is necessary for the structural integrity of the house and all other parts on the house require it before they can be added. It wouldn&#8217;t make very much sense to build just one wall with all the doors, windows, paint, and fixtures before having the frame built. I suppose you could build a house this way but it would take much longer and would be much more difficult.</p>




<p>Just like the wooden frame is used to build a house, a web framework, such as Rails, is used to build web applications. Rails combines Ruby with HTML, CSS, and Javascript and by doing so creates the structure of our web app. Without a framework, we would have to make all these connections ourselves and there would be lots of repetition. Our code would take longer to make, be more prone to bugs, and be harder to implement new things later on.</p>




<p>This is a pretty basic introduction to Rails, but hopefully you at least now know the difference between Ruby and Rails and how they work together. If you are interested to know more, I found a much more in depth article on the subject <a href="http://railsapps.github.io/what-is-ruby-rails.html">here</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Do You Value?]]></title>
    <link href="http://rjmccluskey.github.io/blog/2014/11/02/what-do-you-value/"/>
    <updated>2014-11-02T12:03:44-08:00</updated>
    <id>http://rjmccluskey.github.io/blog/2014/11/02/what-do-you-value</id>
    <content type="html"><![CDATA[<p>Values. It&#8217;s a word you hear a lot. When we elect government officials we ask &#8220;what are their values?&#8221; Your grandma probably has certain values that she hopes you&#8217;ll keep in your family. And most importantly, did you assign all the right values to your variables?! Okay, just kidding on that last one! But seriously, what do you value most when you are happiest? Personally, I value <span class="italic">ambition</span>.</p>


<!-- more -->


<p>I thought about times when I&#8217;ve been the happiest and most satisfied. Contrary to that, I thought about times when I&#8217;ve been the least satisfied with my life. And I could quickly narrow down the difference in regards to ambition. Right now I can say that I am very happy. I&#8217;ve chosen to change my career and I love what I&#8217;m doing now. A lot of that has to do with me feeling ambitious. I&#8217;m driven to code every single day and learn as much as I can every single day. And it&#8217;s fun! I seriously wake up every morning and get excited to open my laptop and start coding. This ambition has given me a whole new perspective on life and has even improved other aspects. However, before I made the change, I wasn&#8217;t nearly as satisfied. I woke up and went to work because I felt that I <span class="italic">had</span> to. I&#8217;m not saying it was all bad, but I didn&#8217;t feel ambitious like I do now.</p>




<p>Last week I talked about <a href="http://rjmccluskey.github.io/blog/c6-stereotype-threat.html">stereotype threat</a> and how it can get in the way of achieving at your highest level. To recap, it&#8217;s the impostor in your head telling you that you aren&#8217;t good enough for this and that. I think that holding ambition as an important value can help fight against stereotype threat. If you are ambitious, you might take on a lot and you might fail at times, but you will also see yourself succeed in ways others (or even yourself) do not think is possible and that success will prove the impostor wrong. Having a track record of these successes born out of your ambition can be a great thing to fall back on when times get tough.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iterations - Ruby vs JavaScript]]></title>
    <link href="http://rjmccluskey.github.io/blog/2014/11/02/iterations-ruby-vs-javascript/"/>
    <updated>2014-11-02T12:01:25-08:00</updated>
    <id>http://rjmccluskey.github.io/blog/2014/11/02/iterations-ruby-vs-javascript</id>
    <content type="html"><![CDATA[<p>I&#8217;ve started learning JavaScript this week and I have mixed feelings about it. At first it was just a pain in the ass. I&#8217;ve gotten pretty used to the wonders of ruby and how simple it can be. JavaScript on the other hand, can be pretty tough for a beginner. But as I got going I started to really like it because it is really fun to manipulate HTML elements. Anyways, to show you a little comparison between ruby and JS let&#8217;s take a look at how we can iterate through an array in both languages.</p>


<!-- more -->


<h3>Ruby</h3>




<p>If you are using ruby and you have an array object, you can do something to each of the values in that array using the <span class="code">each</span> method. If that&#8217;s not straightforward I don&#8217;t know what is! Let me show you how it works with an example:</p>




<pre class="code-window">
# Ruby

array = [1,2,3,4,5]
array.each { |value| puts value }

# 1
# 2
# 3
# 4
# 5</pre>




<p>This built in method knows how to cycle though the array automatically. Once you get used to the syntax there really isn&#8217;t much to think about. Of course this is a simple example and it can get much more complicated but you get the idea.</p>




<h3>JavaScript</h3>




<p>Unfortunately, there is nothing built into JS to iterate as easy as we can in ruby. So far, the best way I&#8217;ve found to iterate as we did with the example above is by using a <span class="code">for</span> loop. Let&#8217;s do the exact same iteration in JS:</p>




<pre class="code-window">
// JavaScript

var array = [1,2,3,4,5];
for (var count = 0; count < array.length; count++) {
  console.log(array[count]);
}

// 1
// 2
// 3
// 4
// 5</pre>




<p>A quick comparison shows that there&#8217;s definitely a little more to think about when iterating in JS. Making our array is pretty similar except we use the keyword <span class="code">var</span> and we need a semi-colon at the end of the statement. Our <span class="code">for</span> loop takes three expressions. The first creates a new local variable <span class="code">count</span> and assigns an initial value of 0 to it. The second expression is used so that the loop knows when to stop. And the third expression adds 1 to <span class="code">count</span> after each loop. I think it&#8217;s pretty obvious that ruby wins when it comes to ease of iterating.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stereotypes Are Bad, Mmkay]]></title>
    <link href="http://rjmccluskey.github.io/blog/2014/10/26/stereotypes-are-bad-mmkay/"/>
    <updated>2014-10-26T12:38:20-07:00</updated>
    <id>http://rjmccluskey.github.io/blog/2014/10/26/stereotypes-are-bad-mmkay</id>
    <content type="html"><![CDATA[<p>Ever heard of <span class="italic">stereotype threat</span>? I hadn&#8217;t before this week but <a href="http://devbootcamp.com">DBC</a> had us research it. It&#8217;s a really interesting topic and I think everyone can benefit from understanding it. So what exactly is it? This <a href="http://www.reducingstereotypethreat.org/definition.html">article</a> explains it well:</p>


<!-- more -->


<blockquote class="quote">Stereotype threat refers to being at risk of confirming, as self-characteristic, a negative stereotype about one&#8217;s group (<a href="http://www.reducingstereotypethreat.org/bibliography_steele_aronson.html">Steele & Aronson, 1995</a>). This term was first used by <a href="http://www.reducingstereotypethreat.org/bibliography_steele_aronson.html">Steele and Aronson (1995)</a> who showed in several experiments that Black college freshmen and sophomores performed more poorly on standardized tests than White students when their race was emphasized. When race was not emphasized, however, Black students performed better and equivalently with White students. The results showed that performance in academic contexts can be harmed by the awareness that one&#8217;s behavior might be viewed through the lens of racial stereotypes.</blockquote>




<p>While this research was done primarily in terms of race, stereotype threat can come in many forms. I noticed a long time before I signed up for DBC that I was interested in coding. I wished I knew it earlier so that I would have chosen to pursue a CS degree when applying to college. So for a while, I didn&#8217;t believe I could switch careers and become a developer. I had already obtained a different degree and was heading on a different path. I know that this might not exactly have been a stereotype holding me back but it&#8217;s the best way I can identify with the subject and I think it&#8217;s something that a lot of us going to DBC have felt before.</p>




<p>Stereotype threat is really that little naysayer inside our brain telling us that we can&#8217;t do something because of x, y, and z. But that evil little voice is wrong! I know without a doubt, a lot if not all of us students will have moments of doubting ourselves while at DBC. And I think the best way to combat this is to pay attention to others and their attitude. If someone seems down on themselves we should reassure them that they are capable! And when we get down on ourselves we should remind ourselves how far we&#8217;ve come and seek help from others. The whole point of DBC is to foster a community to learn with and from. So it will be with this community that we will fight stereotype threat.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Varying Variables of Ruby]]></title>
    <link href="http://rjmccluskey.github.io/blog/2014/10/25/the-varying-variables-of-ruby/"/>
    <updated>2014-10-25T13:05:51-07:00</updated>
    <id>http://rjmccluskey.github.io/blog/2014/10/25/the-varying-variables-of-ruby</id>
    <content type="html"><![CDATA[<p>If you&#8217;re at least a little familiar with ruby, or any programming language, you probably have an idea of what a variable is. Put <span class="italic">really</span> simply, it&#8217;s the thing you assign values to. Values can be blocks of code but ultimately they are a string, number, boolean, or groups of any combination of these stored in an array or hash. Why use variables? Well there&#8217;s many reasons but mainly it&#8217;s so you don&#8217;t have to write pieces of code over and over and over again. In today&#8217;s entry we&#8217;ll be going over the four main types of ruby variables and when to use them!</p>


<!-- more -->


<h3>#1 Local Variables</h3>




<p>The most common type you will see is the <span class="italic">local variable</span>. Local variable names start with a lowercase letter or underscore and can include any combination of letters, numbers and underscores. <span class="code">my_variable</span>, <span class="code">h_84hdfa_574</span>, <span class="code">_stuff</span> and <span class="code">x</span> are all examples of local variables. Assigning a value to a local variable looks like this:</p>




<pre class="code-window">example_variable = "Hello, world!"</pre>




<p>From the above example, our local variable is <span class="code">example_variable</span> to which we assign the string <span class="code">&#8220;Hello, world!&#8221;</span>. Local variables are only accessible within their scope. Understanding scope deserves it&#8217;s own post, but for now you can think of it as a layer. When you start with a blank slate you are in the outermost layer, and adding things like classes, methods, or modules creates inner layers. A local variable defined in the <span class="italic">outer layer</span> can&#8217;t be used by any of the inner layers. And a local variable defined inside a method can only be used in the method definition. Take a look at the following example to get a better idea of what I mean:</p>




<pre class="code-window">
var1 = "apple"

def make_apple_a_banana
  var1 = "banana"
end

make_apple_a_banana
puts var1</pre>




<p>Since we use the same variable name <span class="code">var1</span> you might expect our method <span class="code">make_apple_a_banana</span> to change the assignment of <span class="code">var1</span>. But as we just learned, even though these variables have the same name, they don&#8217;t have the same scope. Therefore, running this code produces:</p>




<pre class="code-window">apple</pre>




<h3>#2 Global Variables</h3>




<p>Unlike local variables, <span class="italic">global variables</span> can be accessed by anything, anywhere in your program. You can recognize a global variable because it starts with a dollar sign <span class="code">$</span>. Ruby has built-in global variables and you can create your own. However, a lot of programmers will tell you that making global variables is rarely a good idea because they can contradict the object orientated nature of ruby. But for the sake of learning let&#8217;s take a look at an example:</p>




<pre class="code-window">
$global_var = "Hello"

def world_greeting
  puts $global_var + " world!"
end

world_greeting

=>
Hello World!</pre>




<p>If we had instead used a local variable, running <span class="code">world_greeting</span> would have gave us an undefined variable or method error.</p>




<h3>#3 Instance Variables</h3>




<p><span class="ital">Instance variables</span> are variables that are accessible inside an object, but only that object. You&#8217;ll usually use them in classes. Instance variable names always start with an at sign <span class="code">@</span>. Let&#8217;s make a new class to show you an example:</p>




<pre class="code-window">
class Cup
  def initialize
    @full = false
  end

  def fill
    @full = true
  end

  def is_full?
    @full
  end
end

sippy_cup = Cup.new
sippy_cup.fill
sippy_cup.is_full?

=> true</pre>




<p>As you can see, our instance variable <span class="code">@full</span> can be used and manipulated in different method definitions within the class <span class="code">Cup</span>. Had we called <span class="code">@full</span> outside of our class, we would get an undefined variable error.</p>




<h3>#4 Class Variables</h3>




<p><span class="italic">Class variables</span> are kinda like global variables (and I use that comparison loosely) however they are scoped to their class hierarchy. They are designated by starting with two at signs <span class="code">@@</span>. They store values that are shared between a class and instances of that class, but they&#8217;re not visible to any other objects. So they differ from global variables in that they are not mutable and visible everywhere. Let&#8217;s look at an example to see what I mean:</p>




<pre class="code-window">
class Top
  def initialize(x)
    @@x = x
  end

  def get_x
    @@x
  end
end

class Middle < Top
end

class Bottom < Middle
end

top = Top.new("Hi!")
middle = Middle.new("Bye!")
bottom = Bottom.new("Hello?")
puts top.get_x
puts middle.get_x
puts bottom.get_x

=>
Hello?
Hello?
Hello?</pre>




<p>Uh oh! If you didn&#8217;t know how class variables worked you might have expected three different outputs, but each time we created a class, we redefined <span class="code">@@x</span>. So <span class="code">puts</span>ing each of our objects gave us the last initialization <span class="code">&#8220;Hello?&#8221;</span>.</p>




<p>There you have it, four different types of ruby variables to play with! Now get busy and go practice already!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gimme Some Feedback!]]></title>
    <link href="http://rjmccluskey.github.io/blog/2014/10/19/gimme-some-feedback/"/>
    <updated>2014-10-19T12:35:59-07:00</updated>
    <id>http://rjmccluskey.github.io/blog/2014/10/19/gimme-some-feedback</id>
    <content type="html"><![CDATA[<p>Any musician will tell you that feedback is the worst! Have you ever been to a concert and heard a loud, shrieking, buzzing sound build up out of no where?! Yeah, it&#8217;s pretty horrible. But all of us at <a href="http://devbootcamp.com">DBC</a> love feedback! That is, giving and receiving feedback on our interpersonal and programming skills. We are learning so much, so fast, so it&#8217;s important to have some kind of indication on how we are doing.</p>


<!-- more -->


<p>So far, the main way us students are getting feedback is through pairing. For the most part, I have really enjoyed paired programming. I am always surprised by how efficiently we are able to work though a problem that would have probably taken me much longer to do alone. There&#8217;s always opportunity to learn and to teach. And on top of all that, we get the chance to work with many different kinds of people which is a great way to practice communication skills. When you are navigating while pairing with someone, you don&#8217;t have your hands on the code. Because of this, you really need to communicate clearly to get your ideas across to the other person. For something as technical as programming, this ability is very important. I&#8217;ve found that keeping communication flowing as much as possible leads to the best pairing sessions.</p>




<p>After we pair, we then give the other student feedback, anonymously. When I read my feedback for the first time, I was a little nervous. I wasn&#8217;t sure how I would react if someone had something super critical to say. Of course, nothing like this happened and most people had lots of very positive things to say. I did notice a slight jump of my stomach when someone pointed out areas that I needed to improve, but I quickly reminded myself that this will help me grow. My feedback has taught me to be more assertive with my ideas when I know a better solution than my pair.</p>




<p>When I first gave feedback to another student, I remember feeling a little conflicted about it. I really didn&#8217;t want to come off the wrong way, but I also didn&#8217;t want leave something out for the sake of someone&#8217;s feelings. I found that it is important to point out strengths and weaknesses of your pair so that they know what they are doing right, and what what they need to improve on. I&#8217;ve also found that being honest is the best thing to do while giving feedback.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use a Ruby Class to Model a Book!]]></title>
    <link href="http://rjmccluskey.github.io/blog/2014/10/19/use-a-ruby-class-to-model-a-book/"/>
    <updated>2014-10-19T12:33:18-07:00</updated>
    <id>http://rjmccluskey.github.io/blog/2014/10/19/use-a-ruby-class-to-model-a-book</id>
    <content type="html"><![CDATA[<p>This week at <a href="http://devbootcamp.com">DBC</a> we learned how to create our own ruby classes. There&#8217;s all kinds of classes already built into ruby, such as <span class="code">Integer</span>, <span class="code">Array</span>, and even <span class="code">Object</span>. Everything in ruby is an object and all objects are <span class="italic">instances</span> of a class. And just like how you can create your own objects, you can create your own classes too! In today&#8217;s entry, I will be showing you how to create a class to model a book!</p>


<!-- more -->


<p>There&#8217;s a lot we could put into our <span class="code">Book</span> class, but let&#8217;s just say that you want to model the total number of pages in your book, what page you are on, the ability to turn pages, and the ability to go to a specific page. The following code can be used to create our class with these functions:</p>




<pre class="code-window">
 1     class Book
 2       def initialize(total_pages)
 3         raise ArgumentError.new("Please enter an Integer") if not total_pages.is_a? Integer
 4         @total_pages = total_pages
 5         @page = 1
 6       end
 7
 8       def page
 9         @page
10       end
11
12       def page=(page)
13         @page = page
14       end
15
16       def turn_page
17         @page += 1
18       end
19     end
    </pre>




<p>Now let&#8217;s go over what this all means. First, we create the class simply with <span class="code">class Book</span>. When you make a class, you then define methods that are specific to those class objects. These are called, <span class="italic">class instance methods</span>. In other words, these methods are <span class="italic">instances</span> of the class and only objects that are instances of that class can use them. We create our first instance method on line 2. The method <span class="code">initialize</span> is a special instance method that runs when we create a new class object. We can create a new book called <span class="code">my_book</span> like so:</p>




<pre class="code-window">my_book = Book.new(200)</pre>




<p>Going back to our code, you can see that <span class="code">initialize</span> takes one argument <spane class="code">total_pages</spane>. When we created <span class="code">my_book</span> it takes <span class="code">200</span> as the argument for <span class="code">initialize</span>. Line 3 will raise an <span class="code">ArgumentError</span> if we enter anything other than an <span class="code">Integer</span> when we create the <span class="code">Book</span>. In line 4, we create the <span class="italic">instance variable</span> <span class="code">@total_pages</span> and set it equal to our argument <span class="code">total_pages</span>. Instance variables are extremely important when creating a class because they can be called outside of an instance method&#8217;s definition. Line 5 creates another instance variable <span class="code">@page</span> and gives it a value of <span class="code">1</span>. When we make a new <span class="code">Book</span> object, we are automatically on page 1!</p>




<p>Our next instance method <span class="code">page</span> is created on line 8. This simply returns the value of the instance variable <span class="code">@page</span>. So if we wanted to see what page we were on in <span class="code">my_book</span> we could do it like this:</p>




<pre class="code-window">
my_book.page
=> 1 </pre>




<p><span class="code">#page</span> is called a <span class="italic">reader method</span> because it reads the value of an instance variable. We can also make <span class="italic">writer methods</span> that will change the value of an instance variable. This is exactly what we do on line 12! We can change to any page number we want like so:</p>




<pre class="code-window">my_book.page = 45
=> @page = 45</pre>




<p>You notice how we added spaces to the <span class="code">=</span> and we didn&#8217;t need the parentheses? This is some <span class="italic">syntax sugar</span> that ruby lets us do! Lastly, on line 16 we define our instance method to turn pages. As you can see, this method will add <span class="code">1</span> to <span class="code">@page</span>. As you probably guessed you call it like this:</p>




<pre class="code-window">my_book.turn_page
=> @page = 46</pre>




<p>There you have it! Our very own ruby class just for books! Obviously, there&#8217;s a lot more we could add to this class definition. What if you want to turn pages the other way? What if we turn to a page that is greater than our total pages? What&#8217;s the name of the book? If you want some practice, try to go and add these on your own! But before I let you go there&#8217;s one last thing I want to tell you about. Remember those reader and writer methods? They are super common when making classes. In fact, they are so common that there is a shorthand way of creating them. We use <span class="italic">attribute methods</span> to do this! Our code can be refactored to the following with the <span class="code">attr_accessor</span> method:</p>




<pre class="code-window">
 1     class Book
 2       attr_accessor :page
 3
 4       def initialize(total_pages)
 5         raise ArgumentError.new("Please enter an Integer") if not total_pages.is_a? Integer
 6         @total_pages = total_pages
 7         @page = 1
 8       end
 9
10       def turn_page
11         @page += 1
12       end
13     end
</pre>




<p>If we had just wanted to make a reader method we could have used <span class="code">attr_reader</span> and if we wanted to just make a writer method we could have used <span class="code">attr_writer</span>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't Feed the Patent Trolls!]]></title>
    <link href="http://rjmccluskey.github.io/blog/2014/10/12/dont-feed-the-patent-trolls/"/>
    <updated>2014-10-12T12:31:20-07:00</updated>
    <id>http://rjmccluskey.github.io/blog/2014/10/12/dont-feed-the-patent-trolls</id>
    <content type="html"><![CDATA[<p><a href="http://devbootcamp.com/">DBC</a> had us research some issues facing the tech industry today. Considering the massive size of this industry, it probably doesn&#8217;t come to much of a surprise that there&#8217;s plenty of issues out there. One that caught my eye (maybe because of the funny name) has to do with something called <span class="italic">patent trolls</span>.</p>


<!-- more -->


<p>So what exactly is a paten troll? If found this <a href="https://www.eff.org/issues/resources-patent-troll-victims">article</a> from the Electronic Frontier Foundation that explains it very well. In it they say:</p>




<blockquote class="quote">&#8220;A patent troll uses patents as legal weapons, instead of actually creating any new products or coming up with new ideas. Instead, trolls are in the business of litigation (or even just threatening litigation). They often buy up patents cheaply from companies down on their luck who are looking to monetize what resources they have left, such as patents. Unfortunately, the Patent Office has a habit of issuing patents for ideas that are neither new nor revolutionary, and these patents can be very broad, covering everyday or commonsense types of computing – things that should never have been patented in the first place. Armed with these overbroad and vague patents, the troll will then send out threatening letters to those they argue infringe their patent(s).  These letters threaten legal action unless the alleged infringer agrees to pay a licensing fee, which can often range to the tens of thousands or even hundreds of thousands of dollars.&#8221;</blockquote>




<p>Now I named this entry <span class="italic">Don&#8217;t Feed the Patent Trolls</span> in comparison to trolls that lurk on the Internet and say things to get a rise out of people. If you recognize that someone is being a troll you should just ignore them because the reaction is what they are looking for. While I made this connection for humor, this same strategy will not work on patent trolls. But how could we stop this type of patent abuse?</p>




<p>Honestly, I don&#8217;t have enough knowledge on the subject to really answer that, but I&#8217;ll throw out some ideas that I saw while I was researching the subject. Right now, patent legislation is being revised in hopes to curb this abuse. But the problem might not be just localized to patents. In the United States, each party involved in a lawsuit is responsible for their own legal fees. In other places, such as in Europe, the loser of the lawsuit pays all the legal fees. Now I&#8217;m not really saying we should try to adopt a system like that in the U.S. but it is interesting that there is less of a problem with patent trolls in Europe because of this difference. It&#8217;s much riskier for the patent troll to sue when there is a possibility that they will have to pay those extra fees. Perhaps another solution could be that the patent troll must have proof of production of the product in question to sue on the grounds of patent infringement. This might help fight against companies buying up patents with no desire to actually create something from such patent.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Enumerable Method: #cycle]]></title>
    <link href="http://rjmccluskey.github.io/blog/2014/10/12/ruby-enumerable-method-cycle/"/>
    <updated>2014-10-12T12:05:59-07:00</updated>
    <id>http://rjmccluskey.github.io/blog/2014/10/12/ruby-enumerable-method-cycle</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been getting my hands dirty with algorithms this week and consequently I&#8217;ve been looking at built-in Ruby methods. Lots and lots of methods. It was a little daunting to see the massive lists of these methods on <a href="http://ruby-doc.org/core-2.1.3/index.html">Ruby Docs</a> but I am finally feeling less intimidated by them. I&#8217;m not even close to knowing all of them, but I&#8217;ve gotten pretty good with some of them. So guess what?! I&#8217;m going to teach you about the enumerable method, <a href="http://ruby-doc.org/core-2.1.3/Enumerable.html#method-i-cycle"><span class="code">#cycle</span></a>.</p>


<!-- more -->


<p>From <a href="http://ruby-doc.org/core-2.1.3/index.html">Ruby Docs</a>, the enumerable method <span class="code">#cycle</span> has the following syntax:</p>




<pre class="code-window">
  cycle(n=nil) { |obj| block }  ---> nil <br>
  cycle(n=nil)  ---> an_enumerator
</pre>




<p><span class="code">#cycle</span> takes one argument (shown as <span class ="code">n</span> in the above syntax) and calls <span class="code">block</span> for each element of enum repeatedly <span class ="code">n</span> times, or forever if none or <span class="code">nil</span> is given. If a non-positive number is given, it doesn&#8217;t do anything. If the loop finishes without being interrupted, it returns <span class="code">nil</span>. Also, <span class="code">#cycle</span> is a non-destructive method, meaning that it will not alter the object we call it on. If no <span class="code">block</span> is given, it returns an enumerator instead.</p>




<p>So the best way to understand how to use a new method is with some examples! Let&#8217;s print a grocery list 3 times so that we don&#8217;t forget what to buy.</p>




<pre class="code-window">
  grocery_list = ["milk","eggs","bread","salsa"] <br>
  grocery_list.cycle(3) { |item| print item + " " } <br>
  => milk eggs bread salsa milk eggs bread salsa milk eggs bread salsa
</pre>




<p>So there you have it! My quick little guide to how to use the enumerable method <span class="code">#cycle</span>. Get out there and try it for yourself!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Arrays and Hashes in Ruby]]></title>
    <link href="http://rjmccluskey.github.io/blog/2014/10/05/using-arrays-and-hashes-in-ruby/"/>
    <updated>2014-10-05T14:06:11-07:00</updated>
    <id>http://rjmccluskey.github.io/blog/2014/10/05/using-arrays-and-hashes-in-ruby</id>
    <content type="html"><![CDATA[<p>Time for another coding lesson. So what&#8217;s on the table for this week? Why, it&#8217;s our good fiends <span class="italic">arrays</span> and <span class="italic">hashes</span>.</p>


<!-- more -->


<p>So what are they? Well, to put it simply, they are fancy variables that we can use to store lists of data. A normal, boring variable stores just one value. But with arrays and hashes we can store an endless amount! We can even use them to store other arrays and hashes! So why do we have two types and what are the differences between the two?</p>




<p>To give you an answer to that last question, let me first explain what arrays are. As you already know an array is a list of data. In ruby, you create an array with square brackets `[&#8230;]` and separate the values with commas. So for example if you wanted an array named <span class="italic">array</span> (I know, very creative right?!) containing three strings, &#8220;one&#8221; &#8220;two&#8221; and &#8220;three&#8221; you&#8217;d do so like this:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;one&quot;</span><span class="p">,</span><span class="s2">&quot;two&quot;</span><span class="p">,</span><span class="s2">&quot;three&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<p>But there&#8217;s something important to know about arrays. Each value in an array is assigned a number. This is important for when you want to call one of those values. But instead of starting with the number 1, the first value inside an array is assigned the number 0. So remember that super sweet array we just created? Well, the first value, &#8220;one&#8221;, is assigned as 0, &#8220;two&#8221; is assigned as 1, and &#8220;three&#8221; is assigned as 2. So if you wanted to print the &#8220;first&#8221; value from your array to the screen, you&#8217;d do so like this:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="nb">puts</span> <span class="n">array</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<p>Arrays are great when you want order to your list. The order can be manipulated in all sorts of ways! A simple example would be a list of names that you want to then alphabetize. But what if you don&#8217;t care so much about the order and you want to describe the values with something different than numbers? This is exactly where hashes come into play! With hashes, you can assign values with whatever you want. Hashes are lists of &#8220;key:value pairs&#8221;. Keys must be unique but values can be repeated. So let&#8217;s say you wanted to create a hash of people&#8217;s names and their eye color. You could do it like this:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="n">eye_color</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">Richard</span><span class="p">:</span> <span class="s2">&quot;blue&quot;</span><span class="p">,</span> <span class="ss">Natalie</span><span class="p">:</span> <span class="s2">&quot;green&quot;</span><span class="p">,</span> <span class="ss">Bob</span><span class="p">:</span> <span class="s2">&quot;green&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>As you can see, instead of the square brackets hashes use curly braces `{&#8230;}`. If you want to print Bob&#8217;s eye color, you could do so like this: </p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="nb">puts</span> <span class="n">eye_color</span><span class="o">[</span><span class="ss">:Bob</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<p>Calling a value from a hash uses square brackets just like an array, and make sure to put the colon ( : ) in front of the key. The order of hashes are a bit more arbitrary, but they are better than arrays to use in certain situations.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Are You Thinking?]]></title>
    <link href="http://rjmccluskey.github.io/blog/2014/10/05/what-are-you-thinking/"/>
    <updated>2014-10-05T13:50:29-07:00</updated>
    <id>http://rjmccluskey.github.io/blog/2014/10/05/what-are-you-thinking</id>
    <content type="html"><![CDATA[<p>At Dev Bootcamp we are learning a ton of stuff. That&#8217;s obvious. But, as a DBC student, it makes me wonder how I will retain as much information as possible. The reality is we all have different thinking styles and we all learn in different ways so how can I make sure I am learning in the best environment? Well, a good place to start is to actually narrow down my thinking style. Luckily, DBC had us do this before we even started Phase 0!</p>


<!-- more -->


<p>According to Anthony Gregorc, there are <a href="http://web.cortland.edu/andersmd/learning/gregorc.htm">four main thinking styles</a>. These are concrete sequential, concrete random, abstract sequential, and abstract random. I don&#8217;t want to bore you with the details, but let&#8217;s quickly go over what each of those means. This <a href="http://www.thelearningweb.net/personalthink.html">thinking style test</a> sums it up best: <blockquote><span class="italic">&#8220;Concrete Sequential Thinkers tend to be based in reality. They process information in an ordered, sequential, linear way. Concrete Random Thinkers are experimenters. Abstract Random Thinkers organize information through reflection, and thrive in unstructured, people-oriented environments. Abstract Sequential Thinkers love the world of theory and abstract thought.&#8221;</span></blockquote></p>




<p>So I know you&#8217;re dying to know my thinking style, right?! Well after I took that test, it turns out that I am a tie between concrete random and abstract random. At first I thought this was a little weird and wondered if I had messed up the test somehow. But the more I thought about it, the more it made complete sense. I love to experiment and get my hands dirty. If I&#8217;m not actually typing in code and testing it, I will not learn. And that goes for using code incorrectly. I like to make errors because it teaches me more about how my computer actually interprets the code that I am giving it. But I also learn a lot from others and, even if sometimes I&#8217;d rather work alone, being in a team helps to motivate me.</p>




<p>Now that I understand my style, I can be strategic and use it to my advantage. Making sure to do plenty of practice problems and seeking out others to pair with will probably be the best thing for me. Looking back on my experience with Phase 0 so far, I can see how I&#8217;ve already done this and how I&#8217;ve strayed away to my disadvantage. At first, I wasn&#8217;t so eager to pair program because I wanted to go through everything by myself first. This might have been due to my concrete random qualities. But I think I ended up spending a lot more time on topics that I could have understood quicker had I been pairing. These same concrete random qualities were making me chase down rabbit holes and without someone else there to pull me back, I went pretty dang far down some of these holes! However, this last week I have been pairing a lot more and I am really starting to see why DBC is all about it. Sometimes it&#8217;s a bit of a struggle for me to navigate because I want my hands on the keyboard, but explaining to another person my ideas without just spilling them into my computer has helped me to be more careful with my organization.</p>




<p>While it&#8217;s obvious that we all have different natural thinking styles, I still think it is important to challenge yourself outside of this definition. For example, concrete sequential thinkers might say that they can&#8217;t work in groups because it&#8217;s just the way they think. But because we live with other people, having this mindset could be a detriment. DBC tells its students to explore the differences between <a href="http://www.brainpickings.org/index.php/2014/01/29/carol-dweck-mindset/">growth and fixed mindsets</a>. I personally agree that we can all have a &#8220;growth mindset&#8221; and, for the most part, we are not limited to natural abilities or intelligence. It&#8217;s good to know your thinking style to create a good learning environment, but it doesn&#8217;t have to define everything you do.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Quick Explaination of Relative, Absolute, and Fixed Positions]]></title>
    <link href="http://rjmccluskey.github.io/blog/2014/09/28/a-quick-explaination-of-relative-absolute-and-fixed-positions/"/>
    <updated>2014-09-28T13:55:47-07:00</updated>
    <id>http://rjmccluskey.github.io/blog/2014/09/28/a-quick-explaination-of-relative-absolute-and-fixed-positions</id>
    <content type="html"><![CDATA[<p>This last week has been intense! I’ve basically gone from zero knowledge of HTML and CSS to creating this very website you are reading this on. But don’t be fooled! I put in a ton of work and had to battle though some major frustration to get here. So what was the hardest part for me to learn? By far it was understanding CSS positioning.</p>


<!-- more -->


<p>I still have a long ways to go before I’m an expert with positioning, but I’ve learned some important basics that I’m gonna share with you right now! So to get you started, let’s discuss the conceptual differences between relative, absolute, and fixed positions.</p>


<p class="bold">Relative Position</p>


<p>When an element&#8217;s position is set to &#8220;relative&#8221; you can move it around <span class="italic">relative</span> to where it would normally be displayed. Let&#8217;s say you have an image inside of your footer with a relative position. By default, this image should just show up inside your footer on the left side. Setting &#8220;right: 10px;&#8221; will place the image 10 pixels from the right side of your footer. So in other words, this image has moved <span class="italic">relative</span> to the footer. Pretty simple right?! Give it some practice and try for yourself!</p>


<p class="bold">Absolute Position</p>


<p>Think of an element with an &#8220;absolute&#8221; position as suck on the page like a sticker. It ignores any other elements and is placed on the page exactly where you tell to to be! If you place it 300px from the top and 40px from the left, it will always be 300px from the top and 40px from the left. The only thing it is positoned relative to is the entire web page itself.</p>


<p class="bold">Fixed Position</p>


<p>An element with a &#8220;fixed&#8221; position doesn&#8217;t move for anyone! Other elements can&#8217;t push it around and even scrolling will not move it. Fixed positioning is great for when you want a menu bar that always shows up no matter where you are on the page.</p>


<p>So there you have it! It&#8217;s important to solidify these concepts before you start messing with positioning stuff on your website. Sorry it&#8217;s so brief but it&#8217;s late and I need some sleep! ;)</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is Dev Bootcamp a Restaurant or a Kitchen?]]></title>
    <link href="http://rjmccluskey.github.io/blog/2014/09/20/is-dev-bootcamp-a-restaurant-or-a-kitchen/"/>
    <updated>2014-09-20T17:44:40-07:00</updated>
    <id>http://rjmccluskey.github.io/blog/2014/09/20/is-dev-bootcamp-a-restaurant-or-a-kitchen</id>
    <content type="html"><![CDATA[<p>I just watched a very interesting Fireside chat with the founder of Dev Bootcamp, Shereef Bishay. In the video he explains how DBC was created and the attitude the students and instructors should have for the best possible experience. In Shereef&#8217;s opinion, DBC is more of a kitchen than a restaurant. <!-- more --> In a restaurant, you look at a menu and decide what you like and if you are willing to pay for it. After deciding, you expect to sit back while the waiters and the chefs get you exactly what you ordered. Most traditional education systems work this way, but not DBC! Shereef goes on to explain that at DBC you are part of the kitchen. Your education is really up to how hungry you are to learn. Of course there is a curriculum and teachers but its up to you to seek out help and help others. In the kitchen, everyone gets their hands dirty and everyone contributes to what is happening. DBC isn&#8217;t just mindless lectures followed by tests. It has structure but there&#8217;s also room for creativity. Because of this, it seems that DBC is constantly evolving into a stronger and stronger monster that feeds on knowledge and curiosity!</p>




<p>So what&#8217;s my impression on DBC so far? Freakin&#8217; awesome! I can&#8217;t imagine a better learning experience. Don&#8217;t get me wrong, I am pretty nervous about all the work. But I&#8217;m excited by the challenge. I definitely fell into the restaurant mindset in the past but I am going to make a conscious effort to &#8220;stay in the kitchen&#8221; while at DBC. I think it might be a bit hard at first, because I am a little introverted, but I know that many other boots will be in the same position as me and that is encouraging.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What the Heck Are Git and GitHub?]]></title>
    <link href="http://rjmccluskey.github.io/blog/2014/09/20/what-the-heck-are-git-and-github/"/>
    <updated>2014-09-20T17:39:27-07:00</updated>
    <id>http://rjmccluskey.github.io/blog/2014/09/20/what-the-heck-are-git-and-github</id>
    <content type="html"><![CDATA[<p>I&#8217;m just finishing my very first week of Phase 0 at Dev Bootcamp and it has far exceeded my expectations! I am amazed at how much I have already learned in less than one week and I am stoked to see what&#8217;s next! The vibe here is nothing but motivational and supportive, which is pretty astonishing considering no one has even met in person yet. And as part of the educational experience I am going to share some stuff I&#8217;ve been learning!</p>


<!-- more -->


<p>I want to talk to you about Git and GitHub. Most of this first week&#8217;s material has been on that subject and for good reason. So what is Git? What is GitHub? Well, to really answer those questions I need to tell you about my little friend version control. Version control remembers all the changes you&#8217;ve made to certain files on your computer and when you&#8217;ve made them. And it even lets you collaborate with others on those same files because it has the ability to merge them together! Imagine the following scenario. You are a scientist researching the effectiveness of different coffees from all over the world (ahh, science!). But you don&#8217;t have the time or the funds to do all the research yourself, so you recruit a team of scientists from different countries to help you with your work. One way to do this would be to have everyone send you their findings separately, and then figure out how to put it all together into a research paper yourself. Or, we can use our buddy version control and have everyone work on the same research paper at the same time! Whenever anyone adds some new data or a new finding, this would be logged and then you can pick and choose what to merge into your master file! And if you change something and decide an earlier version of your paper was better you can easily revert back. Isn&#8217;t that great?!</p>




<p>So how do we actually use version control? Well, that&#8217;s exactly what Git is for! Git is a version control program that runs locally on your computer. Unlike most software, it doesn&#8217;t have a graphical user interface (GUI) and you use your command line to control it. If you are unfamiliar with your command line and how to use it, check out these resources: <a href="http://lifehacker.com/5633909/">A Command Line Primer for Beginners</a>, <a href="http://cli.learncodethehardway.org/book/">The Command Line Crash Course</a>. You assign projects into repositories (repos). A repo is simply a file structure that Git knows to keep track of. Whenever you make a significant change to your repo, you save this change by making a &#8220;commit.&#8221; All your commits are logged for the entirety of the project and you can revert your repo back to any of them at any time! You can even make different versions of your repo with &#8220;branches.&#8221; By default, your repo starts out with the &#8220;master branch&#8221; and other branches can be &#8220;merged&#8221; into your master. This is all great when you are working by yourself, but wouldn&#8217;t it be even more awesome if there was a copy of your repo that lived on the Internet for you and other people to collaborate on?!</p>




<p>You&#8217;re in luck! <a href="http://www.github.com">GitHub</a> is like Facebook for Git users. It is literally an online &#8220;hub&#8221; for you to store your repos and see other people&#8217;s projects as well. And Git syncs with it! You can &#8220;push&#8221; your commits to GitHub, and &#8220;pull&#8221; any commits from GitHub that aren&#8217;t on your computer yet. If you like someone&#8217;s public project and want to create your own from theirs, you can &#8220;fork&#8221; it into your own separate repo and then &#8220;clone&#8221; that repo to your computer. If they update their repo and you want to get their changes, you do this by &#8220;fetching.&#8221; Now for the really cool part. You can even try to convince others to use your changes from your forked repo by sending them a &#8220;pull request.&#8221; That&#8217;s the real beauty of open source software!</p>




<p>So hopefully you now have a better idea what Git and GitHub are and the differences between them. There&#8217;s still a ton more to learn before you can use them but understanding their concepts is an important start. Thanks for reading! :)</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dev Bootcamp Is More Than Just Learning to Code]]></title>
    <link href="http://rjmccluskey.github.io/blog/2014/09/16/dev-bootcamp-is-more-than-just-learning-to-code/"/>
    <updated>2014-09-16T22:46:38-07:00</updated>
    <id>http://rjmccluskey.github.io/blog/2014/09/16/dev-bootcamp-is-more-than-just-learning-to-code</id>
    <content type="html"><![CDATA[<p>I have officially started Phase 0 of <a href="http://devbootcamp.com">devbootcamp</a> and right away we are being challenged to research mindfulness, productivity, and time management. At first I was a little apprehensive to do this because I was really itching to get straight to writing code, but I continued on and actually discovered some really awesome stuff!</p>

<!-- more -->


<p>The next ~18 weeks are gonna be really intense. I knew they would be before I even applied to DBC, but now that I have started the curriculum I am beginning to truly understand what that means. I’m not gonna lie. It’s scary. But I’m so pumped at the same time! And I realize that we are spending time to learn things like mindfulness so that we not only keep our sanity, but also to develop ourselves as human beings. You might even say that DBC isn’t only about web development, but self development too.</p>

<p>So what am I gonna do during Phase 0 to keep myself on tract and reduce stress? First, I want to dabble with meditation and what better way to learn to meditate than to use a web app! <a href="https://www.headspace.com/">Headspace</a> is like a “gym membership for the mind” and offers quick exercises to get you meditating. Second, I’m gonna try to implement the <a href="http://pomodorotechnique.com/">Pomodoro Technique</a> into my studies. If you’ve never heard of this before, it basically involves working in 25 minute increments with time to reflect on your work. And thirdly, I want to give myself a little slack. This <a href="http://paidtoexist.com/counterintuitive-productivity/">article</a> on productivity says it best: “Relax your expectations of constant, never-ceasing production. Instead, focus your energies on how you want to feel and what you need to operate with greatness… The key is in learning to identify and honor your natural rhythms. Listen and lean into whatever you’re being pulled to.”</p>

<p>Alright, I’m off to bed! Hopefully my next entry will have some actual code in it! ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Taking a Leap]]></title>
    <link href="http://rjmccluskey.github.io/blog/2014/09/09/taking-a-leap/"/>
    <updated>2014-09-09T21:00:00-07:00</updated>
    <id>http://rjmccluskey.github.io/blog/2014/09/09/taking-a-leap</id>
    <content type="html"><![CDATA[<p>Three years ago I graduated from Cal Poly with a degree in Civil Engineering. In case you didn’t already do the math, three years ago was 2011 and the economy was horrible. I didn’t know <em>anyone</em> in my major that had a job lined up. On top of all that, I wasn’t even sure if civil engineering was really what I wanted to do. Go figure, an 18 year old entering college straight from high school had trouble choosing a major…</p>

<!-- more -->


<p>But I didn’t want to admit “defeat” and I pretended that I was destined to be a civil engineer. I pushed past my gut feelings, got certified as an Engineer in Training (EIT) and eventually found a job. And for some time things were pretty good!</p>

<p>After a while, however, I started feeling an itch. And it didn’t go away. I wanted something different; something more creative but still technical. I wanted to feel passionate about my work and I wanted to have fun. I am sure there are civil engineers out there that feel this way about their work, but that simply was not me. I finally admitted to myself that it was ok to change my mind.</p>

<p>So, I began searching. I began noticing what made me feel excited. I purposely resisted falling into mediocracy. I started to learn some basic programming, and I really liked it! Pretty quickly I realized that writing code could be exactly what I was looking for in a career!  Learning on my own was going great but I knew that if I really wanted to take this leap and switch careers I would personally need more structure and mentorship. I had heard of “bootcamp” courses that taught programming languages in an incredibly short amount of time and as I researched this possibility I eventually found <a href="http://devbootcamp.com/">Dev Bootcamp</a>. I applied, and I got in!</p>

<p>In less than a week I embark on “Phase 0” of this program and I couldn’t be more excited. As part of my journey I thought it would be useful to blog about my experience so that I have a reference to look back on. I’ve never done anything like this before, but I want this to be public so that hopefully I inspire someone else to find more passion in their career.</p>

<p>So here it goes!</p>
]]></content>
  </entry>
  
</feed>
